
package database;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Goal & Savings Calculator modules.

public class GoalSavingsPanels {

    // ---------- GoalPanel ----------
    public static class GoalPanel extends JPanel {
        private final JTextField nameField;
        private final JTextField targetField;
        private final JTextField deadlineField;

        private final Connection conn;
        private final DashboardViewAboutPanels.ViewRecordsPanel viewPanel;

        public GoalPanel(Connection conn, DashboardViewAboutPanels.ViewRecordsPanel viewPanel) {
            this.conn = conn;
            this.viewPanel = viewPanel;

            nameField = createInputField();
            targetField = createInputField();
            deadlineField = createInputField();

            setLayout(new BorderLayout());
            setBackground(Color.WHITE);

            JLabel header = new JLabel("Create Financial Goal", SwingConstants.CENTER);
            header.setFont(new Font("Segoe UI", Font.BOLD, 22));
            header.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
            add(header, BorderLayout.NORTH);

            JPanel form = new JPanel(new GridBagLayout());
            form.setBackground(Color.WHITE);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.insets = new Insets(10,12,10,12);
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1;

            addRow(form, gbc, 0, "Goal Name:", nameField);
            addRow(form, gbc, 1, "Target Amount (₹):", targetField);
            addRow(form, gbc, 2, "Deadline (YYYY-MM-DD):", deadlineField);

            JButton save = new JButton("Create Goal");
            stylePrimaryButton(save);
            gbc.gridx = 1; gbc.gridy = 3;
            form.add(save, gbc);

            add(form, BorderLayout.CENTER);

            save.addActionListener(e -> onSave());
        }

        private void onSave() {
            String name = nameField.getText().trim();
            String tgt = targetField.getText().trim();
            String dl = deadlineField.getText().trim();
            if (name.isEmpty()) { showError("Goal name required."); return; }
            if (!isDouble(tgt)) { showError("Enter numeric target amount."); return; }
            if (!isValidDate(dl)) { showError("Deadline must be YYYY-MM-DD."); return; }

            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO goals (name, target_amount, deadline) VALUES (?, ?, ?)")) {
                ps.setString(1, name);
                ps.setDouble(2, Double.parseDouble(tgt));
                ps.setString(3, dl);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Goal created.", "Info", JOptionPane.INFORMATION_MESSAGE);
                nameField.setText(""); targetField.setText(""); deadlineField.setText("");
                if (viewPanel != null) viewPanel.loadAllTables();
            } catch (SQLException ex) {
                showError("DB error: " + ex.getMessage());
            }
        }

        // small utilities
        private JTextField createInputField() {
            JTextField f = new JTextField(20);
            f.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            f.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(200,200,200)),
                    BorderFactory.createEmptyBorder(6,8,6,8)
            ));
            return f;
        }
        private void addRow(JPanel panel, GridBagConstraints gbc, int y, String label, JTextField field) {
            gbc.gridx = 0; gbc.gridy = y; gbc.weightx = 0;
            panel.add(new JLabel(label), gbc);
            gbc.gridx = 1; gbc.weightx = 1;
            panel.add(field, gbc);
        }
        private void stylePrimaryButton(JButton b) {
            b.setBackground(new Color(41, 128, 185));
            b.setForeground(Color.WHITE);
            b.setFont(new Font("Segoe UI", Font.BOLD, 14));
            b.setFocusPainted(false);
            b.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            b.setBorder(BorderFactory.createEmptyBorder(8,14,8,14));
        }
        private void showError(String msg) {
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
        }
        private boolean isDouble(String s) {
            if (s == null || s.trim().isEmpty()) return false;
            try { Double.parseDouble(s); return true; } catch (Exception e) { return false; }
        }
        private boolean isValidDate(String s) {
            return s != null && s.matches("\\d{4}-\\d{2}-\\d{2}");
        }
    }

    // ---------- Savings Panel ----------
    public static class SavingsPanel extends JPanel {
        private final JTextField goalField;
        private final JTextField monthsField;
        private final JTextField resultField;

        public SavingsPanel() {
            goalField = createInputField();
            monthsField = createInputField();
            resultField = createInputField();
            resultField.setEditable(false);

            setLayout(new BorderLayout());
            setBackground(Color.WHITE);

            JLabel header = new JLabel("Savings Calculator", SwingConstants.CENTER);
            header.setFont(new Font("Segoe UI", Font.BOLD, 22));
            header.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
            add(header, BorderLayout.NORTH);

            JPanel form = new JPanel(new GridBagLayout());
            form.setBackground(Color.WHITE);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.insets = new Insets(10,12,10,12);
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1;

            addRow(form, gbc, 0, "Goal Amount (₹):", goalField);
            addRow(form, gbc, 1, "Months to Save:", monthsField);

            JButton calc = new JButton("Calculate");
            stylePrimaryButton(calc);
            gbc.gridx = 1; gbc.gridy = 2;
            form.add(calc, gbc);

            gbc.gridy = 3;
            gbc.gridx = 0;
            gbc.gridwidth = 2;
            form.add(resultField, gbc);

            add(form, BorderLayout.CENTER);

            calc.addActionListener(e -> {
                String g = goalField.getText().trim();
                String m = monthsField.getText().trim();
                if (!isDouble(g) || !isInteger(m)) { showError("Enter numeric goal and integer months."); return; }
                double goal = Double.parseDouble(g);
                int months = Integer.parseInt(m);
                if (months <= 0) { showError("Months must be > 0"); return; }
                double monthly = goal / months;
                resultField.setText("Save ₹" + String.format("%.2f", monthly) + " per month");
            });
        }

        // utilities
        private JTextField createInputField() {
            JTextField f = new JTextField(20);
            f.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            f.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(200,200,200)),
                    BorderFactory.createEmptyBorder(6,8,6,8)
            ));
            return f;
        }
        private void addRow(JPanel panel, GridBagConstraints gbc, int y, String label, JTextField field) {
            gbc.gridx = 0; gbc.gridy = y; gbc.weightx = 0;
            panel.add(new JLabel(label), gbc);
            gbc.gridx = 1; gbc.weightx = 1;
            panel.add(field, gbc);
        }
        private void stylePrimaryButton(JButton b) {
            b.setBackground(new Color(41, 128, 185));
            b.setForeground(Color.WHITE);
            b.setFont(new Font("Segoe UI", Font.BOLD, 14));
            b.setFocusPainted(false);
            b.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            b.setBorder(BorderFactory.createEmptyBorder(8,14,8,14));
        }
        private void showError(String msg) {
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
        }
        private boolean isDouble(String s) {
            if (s == null || s.trim().isEmpty()) return false;
            try { Double.parseDouble(s); return true; } catch (Exception e) { return false; }
        }
        private boolean isInteger(String s) {
            if (s == null || s.trim().isEmpty()) return false;
            try { Integer.parseInt(s); return true; } catch (Exception e) { return false; }
        }
    }
}
